C251 COMPILER V5.60.0,  straight                                                           20/11/24  20:41:06  PAGE 1   


C251 COMPILER V5.60.0, COMPILATION OF MODULE straight
OBJECT MODULE PLACED IN .\Out_File\straight.obj
COMPILER INVOKED BY: C:\Keil_v5\C251\BIN\C251.EXE ..\CODE\Algorithms\straight.c XSMALL WARNINGLEVEL(3) OPTIMIZE(0,SPEED)
                    - BROWSE INCDIR(..\..\Libraries\libraries;..\..\Libraries\seekfree_libraries;..\..\Libraries\seekfree_peripheral;..\CODE;
                    -..\USER\inc;..\USER\src;..\..\Libraries\seekfree_components;..\CODE\UserLibraries;..\CODE\Algorithms) DEBUG PRINT(.\Out_
                    -File\straight.lst) TABS(2) OBJECT(.\Out_File\straight.obj) 

stmt  level    source

    1          /*********************
    2           * straight.c
    3           * 
    4           * 作者: COTOMO
    5           * 项目地址: https://github.com/Eclipse-01/SmartVehicleSchool
    6           * MIT开源证书
    7           * JNU-FLY at Jiangnan University
    8           * 2024 November
    9           * 
   10           * 本文件实现了小车直行的PID控制算法和异常处理逻辑。
   11           ********************************************************************************************************
             -************/
   12          
   13          #include "headfile.h"
   14          #include "straight.h"
   15          
   16          #define XINGS 1 // 定义十字的数量
   17          int recv = 32;
   18          char str[64];
   19          /*PID参数调节器*/
   20          float Kp = 0.5;
   21          float Ki = 0;
   22          float Kd = 0.35;
   23          float reactFactor = 1;
   24          
   25          // 添加积分和微分的最大值变量
   26          float MAX_INTEGRAL = 100.0;    // 根据需要调整
   27          float MAX_DERIVATIVE = 1000.0; // 根据需要调整
   28          
   29          /**
   30           * @brief 直行入口函数
   31           * @return uint8 返回值
   32           */
   33          uint8 straight_entrance(void)
   34          {
   35   1          ips200_clear();
   36   1          ips200_show_string(0, 0, "Straight mode");
   37   1          wireless_uart_send_buff("Straight mode\n", 13);
   38   1          while (1)
   39   1          {
   40   2              Remote_Stop();
   41   2              PID_control_straint();
   42   2              delay_ms(10);
   43   2          }
   44   1          return 0;
   45   1      }
   46          
   47          /**
   48           * @brief PID控制函数
   49           */
   50          
   51          int position;
   52          static int last_error = 0;
   53          static int integral = 0;
   54          int angle;
   55          
C251 COMPILER V5.60.0,  straight                                                           20/11/24  20:41:06  PAGE 2   

   56          void PID_control_straint(void)
   57          {
   58   1      
   59   1          position = Line_calculate_position();
   60   1          integral += position;
   61   1          angle = (position * Kp + integral * Ki + (position - last_error) * Kd) * reactFactor;
   62   1          last_error = position;
   63   1          servo_set_position(angle);
   64   1          drv8701_control(MOTOR_BOTH, 35);
   65   1      
   66   1          if (integral > MAX_INTEGRAL)
   67   1              integral = MAX_INTEGRAL;
   68   1          if (integral < -MAX_INTEGRAL)
   69   1              integral = -MAX_INTEGRAL;
   70   1          if (last_error > MAX_DERIVATIVE)
   71   1              last_error = MAX_DERIVATIVE;
   72   1          if (last_error < -MAX_DERIVATIVE)
   73   1              last_error = -MAX_DERIVATIVE;
   74   1      }
   75          
   76          void PID_control_ring(void)
   77          {
   78   1      
   79   1          position = Line_calculate_position_ring();
   80   1          integral += position;
   81   1          angle = (position * Kp + integral * Ki + (position - last_error) * Kd) * reactFactor;
   82   1          last_error = position;
   83   1          servo_set_position(angle);
   84   1          drv8701_control(MOTOR_BOTH, 35);
   85   1      
   86   1          if (integral > MAX_INTEGRAL)
   87   1              integral = MAX_INTEGRAL;
   88   1          if (integral < -MAX_INTEGRAL)
   89   1              integral = -MAX_INTEGRAL;
   90   1          if (last_error > MAX_DERIVATIVE)
   91   1              last_error = MAX_DERIVATIVE;
   92   1          if (last_error < -MAX_DERIVATIVE)
   93   1              last_error = -MAX_DERIVATIVE;
   94   1      }
   95          
   96          /**
   97           * @brief 异常处理函数
   98           * @param exception_code 异常代码
   99           */
  100          void exception_handler(int exception_code)
  101          {
  102   1          ips200_clear();
  103   1          ips200_show_string(0, 0, "Exception occured");
  104   1          switch (exception_code)
  105   1          {
  106   2          case 999:
  107   2              ips200_show_string(16, 0, "System error");
  108   2              break;
  109   2          case 998:
  110   2              ips200_show_string(16, 0, "Divide by zero");
  111   2              break;
  112   2          case 997:
  113   2              ips200_show_string(16, 0, "Line lost");
  114   2              break;
  115   2          case 996:
  116   2              ips200_show_string(16, 0, "Cross line");
  117   2              return;
  118   2          case 995:
  119   2              ips200_show_string(16, 0, "Left roundabout");
  120   2              break;
  121   2          case 994:
C251 COMPILER V5.60.0,  straight                                                           20/11/24  20:41:06  PAGE 3   

  122   2              ips200_show_string(16, 0, "Right roundabout");
  123   2              break;
  124   2          default:
  125   2              ips200_show_string(16, 0, "Unknown error");
  126   2          }
  127   1      }
  128          
  129          /**
  130           * @brief 计算线的位置
  131           *
  132           * 根据滤波后的ADC值计算线的位置，还能检测环岛
  133           *
  134           * @return int 线的位置
  135           * @warning 小心使用
  136           */
  137          
  138          extern uint8 RING_FLAG; // 声明外部变量
  139          int Line_calculate_position()
  140          {
  141   1          float adc1, adc2, adc3, adc4, denominator, position;
  142   1          Line_read_raw();
  143   1      
  144   1          // 归一化处理，范围是0-100
  145   1          adc1 = ((float)adc_value.ADC1 * 100) / 4095;
  146   1          adc2 = ((float)adc_value.ADC2 * 100) / 4095;
  147   1          adc3 = ((float)adc_value.ADC3 * 100) / 4095;
  148   1          adc4 = ((float)adc_value.ADC4 * 100) / 4095;
  149   1      
  150   1          if ((adc1 + adc4 > 160) && RING_FLAG == 0) // 检测到环岛
  151   1          {
  152   2              Beep_set(1);
  153   2              ring_handler();
  154   2          }
  155   1          denominator = adc1 + adc4;
  156   1          if (denominator == 0)
  157   1              denominator = 1;
  158   1          position = (adc4 - adc1) / denominator * 100;
  159   1          sprintf(str, "Position: %f, adc1: %f, adc4: %f\n", position, adc1, adc4);
  160   1          wireless_uart_send_buff(str, strlen(str));
  161   1          return position;
  162   1      }
  163          
  164          /**
  165           * @brief 计算线的位置
  166           *
  167           * 根据滤波后的ADC值计算线的位置，在环岛内使用
  168           *
  169           * @return int 线的位置
  170           * @warning 小心使用
  171           */
  172          
  173          extern uint8 RING_FLAG; // 声明外部变量
  174          int Line_calculate_position_ring()
  175          {
  176   1          float adc1, adc2, adc3, adc4, denominator, position;
  177   1          Line_read_raw();
  178   1      
  179   1          // 归一化处理，范围是0-100
  180   1          adc1 = ((float)adc_value.ADC1 * 100) / 4095;
  181   1          adc2 = ((float)adc_value.ADC2 * 100) / 4095;
  182   1          adc3 = ((float)adc_value.ADC3 * 100) / 4095;
  183   1          adc4 = ((float)adc_value.ADC4 * 100) / 4095;
  184   1          denominator = adc1 + adc4;
  185   1          if (denominator == 0)
  186   1              denominator = 1;
  187   1          position = (adc4 - adc1) / denominator * 100;
C251 COMPILER V5.60.0,  straight                                                           20/11/24  20:41:06  PAGE 4   

  188   1          sprintf(str, "Position: %f\n, adc1: %f, adc4: %f\n", position, adc1, adc4);
  189   1          wireless_uart_send_buff(str, strlen(str));
  190   1          return position;
  191   1      }


Module Information          Static   Overlayable
------------------------------------------------
  code size            =      1301     ------
  ecode size           =    ------     ------
  data size            =    ------     ------
  idata size           =    ------     ------
  pdata size           =    ------     ------
  xdata size           =    ------     ------
  xdata-const size     =    ------     ------
  edata size           =       148     ------
  bit size             =    ------     ------
  ebit size            =    ------     ------
  bitaddressable size  =    ------     ------
  ebitaddressable size =    ------     ------
  far data size        =    ------     ------
  huge data size       =    ------     ------
  const size           =    ------     ------
  hconst size          =       278     ------
End of Module Information.


C251 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
