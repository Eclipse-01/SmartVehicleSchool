C251 COMPILER V5.60.0,  straight                                                           20/11/24  19:07:57  PAGE 1   


C251 COMPILER V5.60.0, COMPILATION OF MODULE straight
OBJECT MODULE PLACED IN .\Out_File\straight.obj
COMPILER INVOKED BY: C:\Keil_v5\C251\BIN\C251.EXE ..\CODE\Algorithms\straight.c XSMALL WARNINGLEVEL(3) OPTIMIZE(0,SPEED)
                    - BROWSE INCDIR(..\..\Libraries\libraries;..\..\Libraries\seekfree_libraries;..\..\Libraries\seekfree_peripheral;..\CODE;
                    -..\USER\inc;..\USER\src;..\..\Libraries\seekfree_components;..\CODE\UserLibraries;..\CODE\Algorithms) DEBUG PRINT(.\Out_
                    -File\straight.lst) TABS(2) OBJECT(.\Out_File\straight.obj) 

stmt  level    source

    1          /*
    2           *此代码可以使小车沿着直线前进
    3           *By JNU-Fly
    4           */
    5          
    6          #include "headfile.h"
    7          #include "straight.h"
    8          
    9          #define XINGS 1 // 定义十字的数量
   10          int recv = 32;
   11          char str[64];
   12          /*PID参数调节器*/
   13          float Kp = 0.5;
   14          float Ki = 0;
   15          float Kd = 0.35;
   16          float reactFactor = 1;
   17          
   18          // 添加积分和微分的最大值变量
   19          float MAX_INTEGRAL = 100.0;    // 根据需要调整
   20          float MAX_DERIVATIVE = 1000.0; // 根据需要调整
   21          
   22          /**
   23           * @brief 直行入口函数
   24           * @return uint8 返回值
   25           */
   26          uint8 straight_entrance(void)
   27          {
   28   1          ips200_clear();
   29   1          ips200_show_string(0, 0, "Straight mode");
   30   1          wireless_uart_send_buff("Straight mode\n", 13);
   31   1          while (1)
   32   1          {
   33   2              Remote_Stop();
   34   2              PID_control_straint();
   35   2              delay_ms(10);
   36   2          }
   37   1          return 0;
   38   1      }
   39          
   40          /**
   41           * @brief PID控制函数
   42           */
   43          
   44          int position;
   45          static int last_error = 0;
   46          static int integral = 0;
   47          int angle;
   48          
   49          void PID_control_straint(void)
   50          {
   51   1      
   52   1          position = Line_calculate_position();
   53   1          integral += position;
   54   1          angle = (position * Kp + integral * Ki + (position - last_error) * Kd) * reactFactor;
   55   1          last_error = position;
   56   1          servo_set_position(angle);
C251 COMPILER V5.60.0,  straight                                                           20/11/24  19:07:57  PAGE 2   

   57   1          drv8701_control(MOTOR_BOTH, 35);
   58   1      
   59   1          if (integral > MAX_INTEGRAL)
   60   1              integral = MAX_INTEGRAL;
   61   1          if (integral < -MAX_INTEGRAL)
   62   1              integral = -MAX_INTEGRAL;
   63   1          if (last_error > MAX_DERIVATIVE)
   64   1              last_error = MAX_DERIVATIVE;
   65   1          if (last_error < -MAX_DERIVATIVE)
   66   1              last_error = -MAX_DERIVATIVE;
   67   1      }
   68          
   69          void PID_control_ring(void)
   70          {
   71   1      
   72   1          position = Line_calculate_position_ring();
   73   1          integral += position;
   74   1          angle = (position * Kp + integral * Ki + (position - last_error) * Kd) * reactFactor;
   75   1          last_error = position;
   76   1          servo_set_position(angle);
   77   1          drv8701_control(MOTOR_BOTH, 35);
   78   1      
   79   1          if (integral > MAX_INTEGRAL)
   80   1              integral = MAX_INTEGRAL;
   81   1          if (integral < -MAX_INTEGRAL)
   82   1              integral = -MAX_INTEGRAL;
   83   1          if (last_error > MAX_DERIVATIVE)
   84   1              last_error = MAX_DERIVATIVE;
   85   1          if (last_error < -MAX_DERIVATIVE)
   86   1              last_error = -MAX_DERIVATIVE;
   87   1      }
   88          
   89          /**
   90           * @brief 异常处理函数
   91           * @param exception_code 异常代码
   92           */
   93          void exception_handler(int exception_code)
   94          {
   95   1          ips200_clear();
   96   1          ips200_show_string(0, 0, "Exception occured");
   97   1          switch (exception_code)
   98   1          {
   99   2          case 999:
  100   2              ips200_show_string(16, 0, "System error");
  101   2              break;
  102   2          case 998:
  103   2              ips200_show_string(16, 0, "Divide by zero");
  104   2              break;
  105   2          case 997:
  106   2              ips200_show_string(16, 0, "Line lost");
  107   2              break;
  108   2          case 996:
  109   2              ips200_show_string(16, 0, "Cross line");
  110   2              return;
  111   2          case 995:
  112   2              ips200_show_string(16, 0, "Left roundabout");
  113   2              break;
  114   2          case 994:
  115   2              ips200_show_string(16, 0, "Right roundabout");
  116   2              break;
  117   2          default:
  118   2              ips200_show_string(16, 0, "Unknown error");
  119   2          }
  120   1      }
  121          
  122          /**
C251 COMPILER V5.60.0,  straight                                                           20/11/24  19:07:57  PAGE 3   

  123           * @brief 计算线的位置
  124           *
  125           * 根据滤波后的ADC值计算线的位置，还能检测环岛
  126           *
  127           * @return int 线的位置
  128           * @warning 小心使用
  129           */
  130          
  131          extern uint8 RING_FLAG; // 声明外部变量
  132          int Line_calculate_position()
  133          {
  134   1          float adc1, adc2, adc3, adc4, denominator, position;
  135   1          Line_read_raw();
  136   1      
  137   1          // 归一化处理，范围是0-100
  138   1          adc1 = ((float)adc_value.ADC1 * 100) / 4095;
  139   1          adc2 = ((float)adc_value.ADC2 * 100) / 4095;
  140   1          adc3 = ((float)adc_value.ADC3 * 100) / 4095;
  141   1          adc4 = ((float)adc_value.ADC4 * 100) / 4095;
  142   1      
  143   1          if ((adc1 + adc4 > 160) && RING_FLAG == 0) // 检测到环岛
  144   1          {
  145   2              Beep_set(1);
  146   2              ring_handler();
  147   2          }
  148   1          denominator = adc1 + adc4;
  149   1          if (denominator == 0)
  150   1              denominator = 1;
  151   1          position = (adc4 - adc1) / denominator * 100;
  152   1          sprintf(str, "Position: %f, adc1: %f, adc4: %f\n", position, adc1, adc4);
  153   1          wireless_uart_send_buff(str, strlen(str));
  154   1          return position;
  155   1      }
  156          
  157          /**
  158           * @brief 计算线的位置
  159           *
  160           * 根据滤波后的ADC值计算线的位置，在环岛内使用
  161           *
  162           * @return int 线的位置
  163           * @warning 小心使用
  164           */
  165          
  166          extern uint8 RING_FLAG; // 声明外部变量
  167          int Line_calculate_position_ring()
  168          {
  169   1          float adc1, adc2, adc3, adc4, denominator, position;
  170   1          Line_read_raw();
  171   1      
  172   1          // 归一化处理，范围是0-100
  173   1          adc1 = ((float)adc_value.ADC1 * 100) / 4095;
  174   1          adc2 = ((float)adc_value.ADC2 * 100) / 4095;
  175   1          adc3 = ((float)adc_value.ADC3 * 100) / 4095;
  176   1          adc4 = ((float)adc_value.ADC4 * 100) / 4095;
  177   1          denominator = adc1 + adc4;
  178   1          if (denominator == 0)
  179   1              denominator = 1;
  180   1          position = (adc4 - adc1) / denominator * 100;
  181   1          sprintf(str, "Position: %f\n, adc1: %f, adc4: %f\n", position, adc1, adc4);
  182   1          wireless_uart_send_buff(str, strlen(str));
  183   1          return position;
  184   1      }


Module Information          Static   Overlayable
------------------------------------------------
  code size            =      1301     ------
C251 COMPILER V5.60.0,  straight                                                           20/11/24  19:07:57  PAGE 4   

  ecode size           =    ------     ------
  data size            =    ------     ------
  idata size           =    ------     ------
  pdata size           =    ------     ------
  xdata size           =    ------     ------
  xdata-const size     =    ------     ------
  edata size           =       148     ------
  bit size             =    ------     ------
  ebit size            =    ------     ------
  bitaddressable size  =    ------     ------
  ebitaddressable size =    ------     ------
  far data size        =    ------     ------
  huge data size       =    ------     ------
  const size           =    ------     ------
  hconst size          =       278     ------
End of Module Information.


C251 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
