C251 COMPILER V5.60.0,  straight                                                           15/11/24  23:08:07  PAGE 1   


C251 COMPILER V5.60.0, COMPILATION OF MODULE straight
OBJECT MODULE PLACED IN .\Out_File\straight.obj
COMPILER INVOKED BY: C:\Keil_v5\C251\BIN\C251.EXE ..\CODE\Algorithms\straight.c XSMALL WARNINGLEVEL(3) OPTIMIZE(0,SPEED)
                    - BROWSE INCDIR(..\..\Libraries\libraries;..\..\Libraries\seekfree_libraries;..\..\Libraries\seekfree_peripheral;..\CODE;
                    -..\USER\inc;..\USER\src;..\..\Libraries\seekfree_components;..\CODE\UserLibraries;..\CODE\Algorithms) DEBUG PRINT(.\Out_
                    -File\straight.lst) TABS(2) OBJECT(.\Out_File\straight.obj) 

stmt  level    source

    1          /*
    2          *此代码可以使小车沿着直线前进
    3          *By JNU-Fly
    4          */
    5          
    6          #include "headfile.h"
    7          #include "straight.h"
    8          
    9          /*PID参数调节器*/
   10          float Kp = 0.5;
   11          float Ki = 0;
   12          float Kd = 0.3;
   13          float reactFactor = 1; 
   14          
   15          // 添加积分和微分的最大值变量
   16          float MAX_INTEGRAL = 100.0;   // 根据需要调整
   17          float MAX_DERIVATIVE = 1000.0; // 根据需要调整
   18          
   19          /**
   20           * @brief 直行入口函数
   21           * @return uint8 返回值
   22           */
   23          uint8 straight_entrance(void){
   24   1          ips200_clear();
   25   1          while(1){
   26   2          PID_control_straint();
   27   2          delay_ms(10);
   28   2          }
   29   1          return 0;
   30   1      }
   31          
   32          /**
   33           * @brief PID控制函数
   34           */
   35          
   36          int position;
   37          static int last_error = 0;
   38          static int integral = 0;
   39          int angle;
   40          
   41          void PID_control_straint(void) {
   42   1      
   43   1          position = Line_calculate_position();
   44   1          integral += position;
   45   1          angle = (position * Kp + integral * Ki + (position - last_error) * Kd) * reactFactor;
   46   1          last_error = position;
   47   1          servo_set_position(angle);
   48   1          drv8701_control(MOTOR_BOTH, 35);
   49   1      
   50   1          if (integral > MAX_INTEGRAL)
   51   1              integral = MAX_INTEGRAL;
   52   1          if (integral < -MAX_INTEGRAL)
   53   1              integral = -MAX_INTEGRAL;
   54   1          if (last_error > MAX_DERIVATIVE)
   55   1              last_error = MAX_DERIVATIVE;
   56   1          if (last_error < -MAX_DERIVATIVE)
C251 COMPILER V5.60.0,  straight                                                           15/11/24  23:08:07  PAGE 2   

   57   1              last_error = -MAX_DERIVATIVE;
   58   1      
   59   1      }
   60          
   61          
   62          void PID_control_ring(void) {
   63   1      
   64   1          position = Line_calculate_position_ring();
   65   1          integral += position;
   66   1          angle = (position * Kp + integral * Ki + (position - last_error) * Kd) * reactFactor;
   67   1          last_error = position;
   68   1          servo_set_position(angle);
   69   1          drv8701_control(MOTOR_BOTH, 35);
   70   1      
   71   1          if (integral > MAX_INTEGRAL)
   72   1              integral = MAX_INTEGRAL;
   73   1          if (integral < -MAX_INTEGRAL)
   74   1              integral = -MAX_INTEGRAL;
   75   1          if (last_error > MAX_DERIVATIVE)
   76   1              last_error = MAX_DERIVATIVE;
   77   1          if (last_error < -MAX_DERIVATIVE)
   78   1              last_error = -MAX_DERIVATIVE;
   79   1      
   80   1      }
   81          
   82          
   83          /**
   84           * @brief 异常处理函数
   85           * @param exception_code 异常代码
   86           */
   87          void exception_handler(int exception_code)
   88          {
   89   1          ips200_clear();
   90   1          ips200_show_string(0,0,"Exception occured");
   91   1          switch(exception_code){
   92   2              case 999:
   93   2                  ips200_show_string(16,0,"System error");
   94   2                  break;
   95   2              case 998:
   96   2                  ips200_show_string(16,0,"Divide by zero");
   97   2                  break;
   98   2              case 997:
   99   2                  ips200_show_string(16,0,"Line lost");
  100   2                  break;
  101   2              case 996:
  102   2                  ips200_show_string(16,0,"Cross line");
  103   2                  return;
  104   2              case 995:
  105   2                  ips200_show_string(16,0,"Left roundabout");
  106   2                  break;
  107   2              case 994:
  108   2                  ips200_show_string(16,0,"Right roundabout");
  109   2                  break;
  110   2              default:
  111   2                  ips200_show_string(16,0,"Unknown error");
  112   2          }
  113   1      }
  114          
  115          /**
  116           * @brief 计算线的位置
  117           * 
  118           * 根据滤波后的ADC值计算线的位置，还能检测环岛
  119           * 
  120           * @return int 线的位置
  121           * @warning 小心使用
  122           */
C251 COMPILER V5.60.0,  straight                                                           15/11/24  23:08:07  PAGE 3   

  123          
  124          extern uint8 RING_FLAG; // 声明外部变量
  125          int Line_calculate_position()
  126          {
  127   1          float adc1, adc2, adc3, adc4, denominator, position;
  128   1          Line_read_raw();
  129   1      
  130   1          //归一化处理，范围是0-100
  131   1          adc1 = ((float)adc_value.ADC1 * 100) / 4095;
  132   1          adc2 = ((float)adc_value.ADC2 * 100) / 4095;
  133   1          adc3 = ((float)adc_value.ADC3 * 100) / 4095;
  134   1          adc4 = ((float)adc_value.ADC4 * 100) / 4095;
  135   1      
  136   1          if (adc1 > adc2 && adc3 >adc4 && adc1 > 60 && adc4 < 40 && RING_FLAG == 0)
  137   1              {
  138   2                  RING_FLAG = 1;
  139   2                  ring_handler();
  140   2              }
  141   1          denominator = adc1 + adc4;
  142   1          if (denominator == 0)
  143   1              denominator = 1;
  144   1          position = (adc4 - adc1) / denominator * 100;
  145   1          return position;
  146   1      }
  147          
  148          
  149          /**
  150           * @brief 计算线的位置
  151           * 
  152           * 根据滤波后的ADC值计算线的位置，在环岛内使用
  153           * 
  154           * @return int 线的位置
  155           * @warning 小心使用
  156           */
  157          
  158          extern uint8 RING_FLAG; // 声明外部变量
  159          int Line_calculate_position_ring()
  160          {
  161   1          float adc1, adc2, adc3, adc4, denominator, position;
  162   1          Line_read_raw();
  163   1      
  164   1          //归一化处理，范围是0-100
  165   1          adc1 = ((float)adc_value.ADC1 * 100) / 4095;
  166   1          adc2 = ((float)adc_value.ADC2 * 100) / 4095;
  167   1          adc3 = ((float)adc_value.ADC3 * 100) / 4095;
  168   1          adc4 = ((float)adc_value.ADC4 * 100) / 4095;
  169   1          denominator = adc1 + adc4;
  170   1          if (denominator == 0)
  171   1              denominator = 1;
  172   1          position = (adc4 - adc1) / denominator * 100;
  173   1          return position;
  174   1      }


Module Information          Static   Overlayable
------------------------------------------------
  code size            =      1193     ------
  ecode size           =    ------     ------
  data size            =    ------     ------
  idata size           =    ------     ------
  pdata size           =    ------     ------
  xdata size           =    ------     ------
  xdata-const size     =    ------     ------
  edata size           =        82     ------
  bit size             =    ------     ------
  ebit size            =    ------     ------
  bitaddressable size  =    ------     ------
C251 COMPILER V5.60.0,  straight                                                           15/11/24  23:08:07  PAGE 4   

  ebitaddressable size =    ------     ------
  far data size        =    ------     ------
  huge data size       =    ------     ------
  const size           =    ------     ------
  hconst size          =       174     ------
End of Module Information.


C251 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
