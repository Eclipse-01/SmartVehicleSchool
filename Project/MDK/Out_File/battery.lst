C251 COMPILER V5.60.0,  battery                                                            20/11/24  20:41:06  PAGE 1   


C251 COMPILER V5.60.0, COMPILATION OF MODULE battery
OBJECT MODULE PLACED IN .\Out_File\battery.obj
COMPILER INVOKED BY: C:\Keil_v5\C251\BIN\C251.EXE ..\CODE\UserLibraries\battery.c XSMALL WARNINGLEVEL(3) OPTIMIZE(0,SPEE
                    -D) BROWSE INCDIR(..\..\Libraries\libraries;..\..\Libraries\seekfree_libraries;..\..\Libraries\seekfree_peripheral;..\COD
                    -E;..\USER\inc;..\USER\src;..\..\Libraries\seekfree_components;..\CODE\UserLibraries;..\CODE\Algorithms) DEBUG PRINT(.\Ou
                    -t_File\battery.lst) TABS(2) OBJECT(.\Out_File\battery.obj) 

stmt  level    source

    1          /*********************
    2           * battery.c
    3           * 
    4           * 作者: COTOMO
    5           * 项目地址: https://github.com/Eclipse-01/SmartVehicleSchool
    6           * MIT开源证书
    7           * JNU-FLY at Jiangnan University
    8           * 2024 November
    9           * 
   10           * 本文件实现了电池电压检测、蜂鸣器控制及电量状态更新的功能。
   11           ********************************************************************************************************
             -************/
   12          
   13          #include "headfile.h"
   14          
   15          #define BAT_VOL_PIN ADC_P05
   16          #define BEEP P32
   17          
   18          uint16 ad_result = 0;           // 引脚电压
   19          uint32 temp;
   20          
   21          uint16 battery_voltage = 0;     // 电池电压
   22          uint16 battery_percentage = 0;  // 电池电量百分比
   23          
   24          /**
   25           * @brief 初始化蜂鸣器
   26           *
   27           * 该函数将 P3.2 引脚配置为推挽输出模式，用于控制蜂鸣器。
   28           */
   29          void Beep_init(void){
   30   1          gpio_mode(P3_2,GPO_PP); // 将P6.7设置为推挽输出
   31   1          P32 = 0;  // 初始化为低电平
   32   1      }
   33          
   34          /**
   35           * @brief 设置蜂鸣器状态
   36           * 
   37           * 该函数用于设置蜂鸣器状态。
   38           * 
   39           * @param status 蜂鸣器状态，0为关闭，1为打开
   40           */
   41          void Beep_set(uint8 status){
   42   1          P32 = status;
   43   1      }
   44          
   45          /**
   46           * @brief 初始化电池电压检测模块
   47           * 
   48           * 该函数初始化用于电池电压检测的ADC模块。
   49           */
   50          void battery_init(void){
   51   1          adc_init(BAT_VOL_PIN, ADC_SYSclk_DIV_32);
   52   1      }
   53          
   54          /**
   55           * @brief 获取电池电压
C251 COMPILER V5.60.0,  battery                                                            20/11/24  20:41:06  PAGE 2   

   56           * 
   57           * 该函数通过ADC读取电池电压，并根据分压电阻计算实际电池电压。
   58           * 如果电池电压低于6.5V，将显示“LOW BATTERY”并停止电机。可以在battery.h中修改LOW_BATTERY_VOLTAGE的值为-
             -1禁用此功能
   59           * 
   60           * @return uint16 返回电池电压，单位为毫伏
   61           */
   62          uint16 get_battery_voltage(void){
   63   1          ad_result = adc_once(BAT_VOL_PIN, ADC_12BIT);
   64   1          temp = (((uint32)ad_result * 3300) / 4095);  //计算出当前adc引脚的电压 计算公式为 ad_result*VCC/ADC分
             -辨率    VCC单位为mv
   65   1          battery_voltage =  temp * 11; //根据引脚电压  和分压电阻的阻值计算电池电压 计算公司为   引脚电压*(R2+
             -R3)/R3   R3为接地端电阻
   66   1          while (battery_voltage < LOW_BATTERY_VOLTAGE){
   67   2              ips200_show_string(120,200,"LOW BATTERY");
   68   2              drv8701_stop(MOTOR_BOTH); //停止电机防止电池过放
   69   2              while(ENABLE_LOW_BATTERY_PROTECTION)
   70   2              delay_ms(10000); // 卡死程序防止程序启动
   71   2          }
   72   1          
   73   1          return battery_voltage;
   74   1      }
   75          
   76          uint16 get_battery_percentage(void){
   77   1          int max_voltage = 4200 * BATTERY_GROUP_NUM;
   78   1          int min_voltage = LOW_BATTERY_VOLTAGE * BATTERY_GROUP_NUM;
   79   1          int current_voltage = get_battery_voltage();
   80   1          int percentage = (current_voltage - min_voltage) * 100 / (max_voltage - min_voltage);
   81   1          if (percentage > 100){
   82   2              percentage = 100;
   83   2          }
   84   1          if (percentage < 0){
   85   2              percentage = 0;
   86   2          }
   87   1          return percentage;
   88   1      }
   89          
   90          /**
   91           * @brief 更新电池状态
   92           * 
   93           * 该函数根据当前电池电压和电量百分比更新电池状态和充电状态。
   94           */
   95          void update_battery_status(void) {
   96   1          battery_percentage = get_battery_percentage();
   97   1      }
   98          
   99          


Module Information          Static   Overlayable
------------------------------------------------
  code size            =       246     ------
  ecode size           =    ------     ------
  data size            =    ------     ------
  idata size           =    ------     ------
  pdata size           =    ------     ------
  xdata size           =    ------     ------
  xdata-const size     =    ------     ------
  edata size           =        19     ------
  bit size             =    ------     ------
  ebit size            =    ------     ------
  bitaddressable size  =    ------     ------
  ebitaddressable size =    ------     ------
  far data size        =    ------     ------
  huge data size       =    ------     ------
  const size           =    ------     ------
  hconst size          =        30     ------
C251 COMPILER V5.60.0,  battery                                                            20/11/24  20:41:06  PAGE 3   

End of Module Information.


C251 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
